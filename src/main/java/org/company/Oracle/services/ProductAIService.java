package org.company.Oracle.services;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.company.Oracle.dto.ProductGenerateRequest;
import org.company.Oracle.dto.ProductGenerateResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;

@Slf4j
@Service
public class ProductAIService {

    private final WebClient webClient;
    private final ObjectMapper objectMapper = new ObjectMapper();

    private final List<String> types = List.of("first-aid", "equipment", "medicine", "prescription", "otc", "supplements");

    @Value("${ai.gemini.api}")
    private String apiKey;

    public ProductAIService(WebClient.Builder builder) {
        this.webClient = builder.baseUrl("https://generativelanguage.googleapis.com").build();
    }

    public ProductGenerateResponse generateProduct(ProductGenerateRequest request) {
        String prompt = buildPrompt(request.getName(), request.getContext(), request.getLanguage());
        log.info("üì§ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt –¥–ª—è Gemini: \n{}", prompt);

        // üëá –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π payload
        Map<String, Object> payload = Map.of(
                "contents", List.of(Map.of(
                        "role", "user",
                        "parts", List.of(Map.of("text", prompt))
                ))
        );

        try {
            log.info("üì¶ Payload, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤ Gemini: {}", objectMapper.writeValueAsString(payload));

            Map<String, Object> response = webClient.post()
                    .uri(uriBuilder -> uriBuilder
                            .path("/v1/models/gemini-1.5-flash:generateContent")
                            .queryParam("key", apiKey)
                            .build())
                    .bodyValue(payload)
                    .retrieve()
                    .onStatus(status -> status.isError(), clientResponse -> clientResponse.bodyToMono(String.class)
                            .flatMap(errorBody -> {
                                log.error("üåê Gemini API Error: {}", errorBody);
                                return Mono.error(new RuntimeException("–û—à–∏–±–∫–∞ Gemini: " + errorBody));
                            }))
                    .bodyToMono(Map.class)
                    .block();

            log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {}", objectMapper.writeValueAsString(response));

            String text = extractTextFromGemini(response);
            log.info("üìú –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ Gemini: {}", text);

            ProductGenerateResponse product = parseGeminiResponse(text);
            log.info("üéØ –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞: {}", product);

            return product;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini API", e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini", e);
        }
    }

    private String buildPrompt(String name, String context, String language) {
        String effectiveLanguage = (language != null && !language.isBlank()) ? language : "ru";

        return String.format(
                "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. Strictly respond with raw JSON only, no markdown code fences or backticks. –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ \"%s\" —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π:\n" +
                        "1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ %s\n" +
                        "2. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ü–µ–Ω—É (–≤ —Ç–≥)\n" +
                        "3. –ö–∞—Ç–µ–≥–æ—Ä–∏—é (–æ–¥–Ω—É –∏–∑: %s)\n" +
                        "4. –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º\n\n" +
                        "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä–æ–≥–æ JSON: { \"description\": ..., \"price\": ..., \"type\": ..., \"imageUrl\": ... }\n\n" +
                        "–ö–æ–Ω—Ç–µ–∫—Å—Ç: %s",
                name,
                effectiveLanguage,
                String.join(", ", types),
                context != null ? context : ""
        );
    }

    private String extractTextFromGemini(Map<String, Object> response) {
        var candidates = (List<Map<String, Object>>) response.get("candidates");
        if (candidates != null && !candidates.isEmpty()) {
            var content = (Map<String, Object>) candidates.get(0).get("content");
            var parts = (List<Map<String, Object>>) content.get("parts");
            if (parts != null && !parts.isEmpty()) {
                return (String) parts.get(0).get("text");
            }
        }
        return "{}";
    }

    private String cleanJsonFromMarkdown(String responseText) {
        return responseText.replaceAll("```json", "")
                .replaceAll("```", "")
                .trim();
    }

    private ProductGenerateResponse parseGeminiResponse(String responseText) {
        String json = cleanJsonFromMarkdown(responseText);
        try {
            return objectMapper.readValue(json, ProductGenerateResponse.class);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-–æ—Ç–≤–µ—Ç–∞ Gemini:\n{}", json, e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: " + e.getMessage());
        }
    }
}